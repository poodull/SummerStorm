<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Arction.SignalTools</name>
    </assembly>
    <members>
        <member name="M:Arction.SignalTools.SignalGenerator.UserControlSineTable.FillFromSineComponents(System.Collections.Generic.List{Arction.SignalTools.SignalGenerator.SineComponent})">
            <summary>
            Fills the control from given list items 
            </summary>
        </member>
        <member name="F:Arction.SignalTools.SignalGenerator.UserControlSineTable.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.UserControlSineTable.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.UserControlSineTable.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Arction.SignalTools.SignalGenerator.UserControlNoiseRow.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.UserControlNoiseRow.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.UserControlNoiseRow.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Arction.SignalTools.SignalGenerator.UserControlTriangleRow.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.UserControlTriangleRow.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.UserControlTriangleRow.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Arction.SignalTools.SignalGenerator.RandomNoiseComponent">
            <summary>
            Random noise waveform component
            </summary>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.RandomNoiseComponent.GetRandomValue">
            <summary>
            Get random value, using offset and amplitude 
            </summary>
            <returns>Random value, in range -Amplitude+Offset ... +Amplitude+Offset</returns>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.RandomNoiseComponent.IsModified">
            <summary>
            Returns true if any of this instances public properties have 
            been modified. Resets flag before returning.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.RandomNoiseComponent.Clone(Arction.SignalTools.SignalGenerator.RandomNoiseComponent)">
            <summary>
            Clones the object
            </summary>
            <param name="src">Object to clone</param>
            <returns>Cloned object</returns>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.RandomNoiseComponent.ToString">
            <summary>
            Convert class description to string 
            </summary>
            <returns>String</returns>
        </member>
        <member name="P:Arction.SignalTools.SignalGenerator.RandomNoiseComponent.Amplitude">
            <summary>
            Amplitude of random noise component. 
            </summary>
        </member>
        <member name="P:Arction.SignalTools.SignalGenerator.RandomNoiseComponent.Offset">
            <summary>
            Offset of random noise component
            </summary>
        </member>
        <member name="P:Arction.SignalTools.SignalGenerator.RandomNoiseComponent.Enabled">
            <summary>
            Is the random noise component included in calculation of the output signal
            </summary>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.UserControlNoiseTable.FillFromNoiseComponents(System.Collections.Generic.List{Arction.SignalTools.SignalGenerator.RandomNoiseComponent})">
            <summary>
            Fills the control from given list items 
            </summary>
        </member>
        <member name="F:Arction.SignalTools.SignalGenerator.UserControlNoiseTable.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.UserControlNoiseTable.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.UserControlNoiseTable.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Arction.SignalTools.SignalGenerator.UserControlSineRow.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.UserControlSineRow.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.UserControlSineRow.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.UserControlTriangleTable.FillFromTriangleComponents(System.Collections.Generic.List{Arction.SignalTools.SignalGenerator.TriangleComponent})">
            <summary>
            Fills the control from given list items 
            </summary>
        </member>
        <member name="F:Arction.SignalTools.SignalGenerator.UserControlTriangleTable.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.UserControlTriangleTable.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.UserControlTriangleTable.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Arction.SignalTools.SignalReader.ThreadType">
            <summary>
            Threading type.
            </summary>
        </member>
        <member name="F:Arction.SignalTools.SignalReader.ThreadType.Thread">
            <summary>
            Use thread.
            </summary>
        </member>
        <member name="F:Arction.SignalTools.SignalReader.ThreadType.Timer">
            <summary>
            Use timer.
            </summary>
        </member>
        <member name="T:Arction.SignalTools.SignalReader.SignalReader">
            <summary>
            Sampled signal file reader. Reads data from various formats, like *.wav, *.sid. 
            The output data stream will have equal amount of channels   
            </summary>
        </member>
        <member name="M:Arction.SignalTools.SignalReader.SignalReader.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Arction.SignalTools.SignalReader.SignalReader.#ctor(System.String)">
            <summary>
            Constructor 
            </summary>
            <param name="embeddableLicenseKey">License key in normal or encrypted format
            Needed when creating the object dynamically at runtime with 'new' 
            operator and there's no controls of same type inserted in any UI designer form.</param>
            <remarks>If you provide the license with this key, 
            YOU ARE NOT ALLOWED TO DISTRIBUTE YOUR SOURCE CODE TO OTHERS. 
            See License Agreement (EULA) for details. </remarks>
        </member>
        <member name="M:Arction.SignalTools.SignalReader.SignalReader.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:Arction.SignalTools.SignalReader.SignalReader.Stop">
            <summary>
            Stop signal reader.
            </summary>
        </member>
        <member name="M:Arction.SignalTools.SignalReader.SignalReader.Start">
            <summary>
            Start signal reader.
            </summary>
            <returns>True if started successfully, else false.</returns>
        </member>
        <member name="M:Arction.SignalTools.SignalReader.SignalReader.CloseFile">
            <summary>
            Close the opened file 
            </summary>
        </member>
        <member name="M:Arction.SignalTools.SignalReader.SignalReader.OpenFile(System.String)">
            <summary>
            Open signal file
            </summary>
            <param name="fileName">Open a signal file. The file extension must be a supported one: wav, sid or ssd</param>
            <returns>Open result</returns>
        </member>
        <member name="M:Arction.SignalTools.SignalReader.SignalReader.Open">
            <summary>
            Open the file set in FileName property
            </summary>
            <returns>Result</returns>
        </member>
        <member name="M:Arction.SignalTools.SignalReader.SignalReader.StopTimer">
            <summary>
            Stop the generator timer
            </summary>
        </member>
        <member name="M:Arction.SignalTools.SignalReader.SignalReader.ReadAllData(System.String,System.Int32@,System.Int32@,System.Double[][]@,Arction.SignalTools.SignalReader.SignalReader.Marker[]@)">
            <summary>
            Read all data from file. The output is a multi-channel samples array, and array of markers.  
            </summary>
            <param name="fileName">Signal file name. The file extension must be a supported one: wav, sid or ssd </param>
            <param name="channelCount">Channel count</param>
            <param name="samplingFrequency">Sampling frequency in Hz</param>
            <param name="samples">Multi-channel samples array. First dimension is the channels, second dimension is samples.
            For example, samples[2][9] gives access to 10th sample of 3rd channel.</param>
            <param name="markers">Array of markers. Null if none was found.</param>
            <returns>File open result</returns>
        </member>
        <member name="M:Arction.SignalTools.SignalReader.SignalReader.ToString">
            <summary>
            Convert class description to string.
            </summary>
            <returns>String</returns>
        </member>
        <member name="P:Arction.SignalTools.SignalReader.SignalReader.ThreadType">
            <summary>
            Thread type. Timer or thread operation.
            </summary>
        </member>
        <member name="P:Arction.SignalTools.SignalReader.SignalReader.LicenseKey">
            <summary>
            License key in normal or encrypted format
            </summary>
        </member>
        <member name="P:Arction.SignalTools.SignalReader.SignalReader.FileFilterString">
            <summary>
            Filter string for file open dialog
            </summary>
        </member>
        <member name="P:Arction.SignalTools.SignalReader.SignalReader.SamplingFrequency">
            <summary>
            Sampling frequency. The count of output points calculated per second. 
            </summary>
        </member>
        <member name="P:Arction.SignalTools.SignalReader.SignalReader.ChannelCount">
            <summary>
            Channel count.  
            </summary>
        </member>
        <member name="P:Arction.SignalTools.SignalReader.SignalReader.Looping">
            <summary>
            The file reading can be automatically moved to beginning when end of file has been reached, by enabling this. 
            </summary>
        </member>
        <member name="P:Arction.SignalTools.SignalReader.SignalReader.Length">
            <summary>
            Length of opened file, in samples (for each channel).
            For some file formats, this is an estimate. 
            </summary>
        </member>
        <member name="P:Arction.SignalTools.SignalReader.SignalReader.FileSize">
            <summary>
            File size in bytes
            </summary>
        </member>
        <member name="P:Arction.SignalTools.SignalReader.SignalReader.BitsPerSample">
            <summary>
            Bits per sample
            </summary>
        </member>
        <member name="P:Arction.SignalTools.SignalReader.SignalReader.OutputIntervalMs">
            <summary>
            Output interval in ms. This is only the target value, and not always accurate. 
            </summary>
        </member>
        <member name="P:Arction.SignalTools.SignalReader.SignalReader.Factor">
            <summary>
            General factor for output signal. Allows using for example millivolt range by setting this 0.001, or 1E-3
            </summary>
        </member>
        <member name="P:Arction.SignalTools.SignalReader.SignalReader.Running">
            <summary>
            Is the signal reader active.
            </summary>
        </member>
        <member name="P:Arction.SignalTools.SignalReader.SignalReader.FileName">
            <summary>
            File name to be read
            </summary>
        </member>
        <member name="E:Arction.SignalTools.SignalReader.SignalReader.SignalPointsRead">
            <summary>
            Signal points read. 
            </summary>
        </member>
        <member name="E:Arction.SignalTools.SignalReader.SignalReader.MarkerRead">
            <summary>
            Marker read. 
            </summary>
        </member>
        <member name="E:Arction.SignalTools.SignalReader.SignalReader.Started">
            <summary>
            Reader has been started
            </summary>
        </member>
        <member name="E:Arction.SignalTools.SignalReader.SignalReader.Stopped">
            <summary>
            File reader has stopped. End of file has been reached and looping is not active. 
            </summary>
        </member>
        <member name="E:Arction.SignalTools.SignalReader.SignalReader.EndOfFileReached">
            <summary>
            End of file has been reached
            </summary>
            <remarks>If Looping is set, this is called just before jumping to beging of the file.</remarks>
        </member>
        <member name="T:Arction.SignalTools.SignalReader.SignalReader.Marker">
            <summary>
            Marker.
            </summary>
        </member>
        <member name="F:Arction.SignalTools.SignalReader.SignalReader.Marker.Type">
            <summary>
            Type.
            </summary>
        </member>
        <member name="F:Arction.SignalTools.SignalReader.SignalReader.Marker.TimeStamp">
            <summary>
            Time stamp.
            </summary>
        </member>
        <member name="T:Arction.SignalTools.SignalReader.SignalReader.SignalPointsReadHandler">
            <summary>
            Delegate for event SignalPointsRead
            </summary>
            <param name="samples">Multi-channel samples array. First dimension is the channels, second dimension is samples.
            For example, samples[2][9] gives access to 10th sample of 3rd channel.</param>
            <param name="firstSampleTimeStamp">First sample time stamp, in seconds</param>
        </member>
        <member name="T:Arction.SignalTools.SignalReader.SignalReader.MarkerReadHandler">
            <summary>
            Delegate for event MarkerRead
            </summary>
            <param name="markerType">Marker type. Different digital input numbers or events can be separated with types.</param>
            <param name="timeStamp">Time stamp of the marker. It is usually bound to previous sample time stamp</param>
        </member>
        <member name="T:Arction.SignalTools.SignalReader.SignalReader.StartedHandler">
            <summary>
            Delegate for event Started
            </summary>
        </member>
        <member name="T:Arction.SignalTools.SignalReader.SignalReader.StoppedHandler">
            <summary>
            Delegate for event Stopped
            </summary>
        </member>
        <member name="T:Arction.SignalTools.SignalReader.SignalReader.EndOfFileReachedHandler">
            <summary>
            Delegate for event FileEndReached
            </summary>
        </member>
        <member name="T:Arction.SignalTools.Spectrum.SpectrumCalculator">
            <summary>
            Spectrum calculator class. Uses FFT routines to convert time signal data into frequency information, or vice versa. 
            </summary>
        </member>
        <member name="M:Arction.SignalTools.Spectrum.SpectrumCalculator.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Arction.SignalTools.Spectrum.SpectrumCalculator.#ctor(System.String)">
            <summary>
            Constructor with license key, in normal or encrypted format
            </summary>
        </member>
        <member name="M:Arction.SignalTools.Spectrum.SpectrumCalculator.CalculateForward(System.Double[],System.Double[]@)">
            <summary>
            Calculates FFT conversion. Converts signal data into frequency component data. 
            </summary>
            <param name="samples">Signal samples</param>
            <param name="fftData">Output FFT data</param>
            <returns>True if successful, else False.</returns>
        </member>
        <member name="M:Arction.SignalTools.Spectrum.SpectrumCalculator.CalculateForward(System.Single[],System.Single[]@)">
            <summary>
            Calculates FFT conversion. Converts signal data into frequency component data. 
            </summary>
            <param name="samples">Signal samples</param>
            <param name="fftData">Output FFT data</param>
            <returns>True if successful, else False.</returns>
        </member>
        <member name="M:Arction.SignalTools.Spectrum.SpectrumCalculator.CalculateBackward(System.Double[],System.Double[]@)">
            <summary>
            Calculates backwards FFT conversion. Converts frequency component data into signal sample data. 
            </summary>
            <param name="samples">Output signal samples</param>
            <param name="fftData">Input FFT data</param>
            <returns>True if successful, else False.</returns>
        </member>
        <member name="M:Arction.SignalTools.Spectrum.SpectrumCalculator.CalculateBackward(System.Single[],System.Single[]@)">
            <summary>
            Calculates backwards FFT conversion. Converts frequency component data into signal sample data. 
            </summary>
            <param name="samples">Output signal samples</param>
            <param name="fftData">Input FFT data</param>
            <returns>True if successful, else False.</returns>
        </member>
        <member name="M:Arction.SignalTools.Spectrum.SpectrumCalculator.PowerSpectrum(System.Double[],System.Double[]@)">
            <summary>
            Calculates power spectrum, having all FFT data in absolute values.  
            The count of output FFT data is same than input data. 
            </summary>
            <param name="samples">Signal samples</param>
            <param name="fftData">Output FFT data</param>
            <returns>True if successful, else False.</returns>
        </member>
        <member name="M:Arction.SignalTools.Spectrum.SpectrumCalculator.PowerSpectrumOverlapped(System.Double[],System.Int32,System.Double,System.Double[]@,System.Int32@)">
            <summary>
            Calculates power spectrum, having all FFT data in absolute values. Overlaps moving FFT window until all data is processed. 
            The count of output FFT data is same than input data. 
            </summary>
            <param name="samples">Signal samples</param>
            <param name="fftWindowLength">Length of moving calculation window.</param>
            <param name="overlapPercent">Overlapping percent. Moving FFT window is shifted by this amount for next calculation round. Valid values are 0...99</param>
            <param name="fftData">Output FFT data. Length equals fftWindowLenght. If samples length is less than fftWindowLength, outputs samples length of data.</param>
            <param name="processedSampleCount">Processed sample count. It is possible that all samples are not processed from the end, if there's not enough data for last FFT window.</param>
            <returns>True if successful, else False.</returns>
        </member>
        <member name="M:Arction.SignalTools.Spectrum.SpectrumCalculator.PowerSpectrum(System.Single[],System.Single[]@)">
            <summary>
            Calculates power spectrum, having all FFT data in absolute values.  
            </summary>
            <param name="samples">Signal samples</param>
            <param name="fftData">Output FFT data</param>
            <returns>True if successful, else False.</returns>
        </member>
        <member name="M:Arction.SignalTools.Spectrum.SpectrumCalculator.PowerSpectrumOverlapped(System.Single[],System.Int32,System.Double,System.Single[]@,System.Int32@)">
            <summary>
            Calculates power spectrum, having all FFT data in absolute values. Overlaps moving FFT window until all data is processed. 
            The count of output FFT data is same than input data. 
            </summary>
            <param name="samples">Signal samples</param>
            <param name="fftWindowLength">Length of moving calculation window.</param>
            <param name="overlapPercent">Overlapping percent. Moving FFT window is shifted by this amount for next calculation round. Valid values are 0...99</param>
            <param name="fftData">Output FFT data. Length equals fftWindowLenght. If samples length is less than fftWindowLength, outputs samples length of data.</param>
            <param name="processedSampleCount">Processed sample count. It is possible that all samples are not processed from the end, if there's not enough data for last FFT window.</param>
            <returns>True if successful, else False.</returns>
        </member>
        <member name="M:Arction.SignalTools.Spectrum.SpectrumCalculator.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="P:Arction.SignalTools.Spectrum.SpectrumCalculator.LicenseKey">
            <summary>
            License key in normal or encrypted format
            </summary>
        </member>
        <member name="T:Arction.SignalTools.SignalGenerator.SquareComponent">
            <summary>
            Square waveform component
            </summary>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.SquareComponent.IsModified">
            <summary>
            Returns true if any of this instances public properties have 
            been modified. Resets flag before returning.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.SquareComponent.Clone(Arction.SignalTools.SignalGenerator.SquareComponent)">
            <summary>
            Clones the object
            </summary>
            <param name="src">Object to clone</param>
            <returns>Cloned object</returns>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.SquareComponent.ToString">
            <summary>
            Convert class description to string 
            </summary>
            <returns>String</returns>
        </member>
        <member name="P:Arction.SignalTools.SignalGenerator.SquareComponent.Amplitude">
            <summary>
            Amplitude of square component.
            </summary>
        </member>
        <member name="P:Arction.SignalTools.SignalGenerator.SquareComponent.Offset">
            <summary>
            Offset of square component
            </summary>
        </member>
        <member name="P:Arction.SignalTools.SignalGenerator.SquareComponent.DelayMs">
            <summary>
            Delay of square component in ms.
            </summary>
        </member>
        <member name="P:Arction.SignalTools.SignalGenerator.SquareComponent.Frequency">
            <summary>
            Frequency of square component
            </summary>
            <remarks>This is not sampling frequency of the generator!</remarks>
        </member>
        <member name="P:Arction.SignalTools.SignalGenerator.SquareComponent.Enabled">
            <summary>
            Is the square component included in calculation of the output signal
            </summary>
        </member>
        <member name="P:Arction.SignalTools.SignalGenerator.SquareComponent.Symmetry">
            <summary>
            Square wave symmetry. Valid range is 0...1.
            If symmetry is &lt; 0.5, the 'low'stage of noise wave is longer than 'high' stage. 
            Vice versa, value &gt; 0.5 makes the 'high' stage longer
            </summary>
        </member>
        <member name="T:Arction.SignalTools.SignalGenerator.ThreadType">
            <summary>
            Threading type
            </summary>
        </member>
        <member name="F:Arction.SignalTools.SignalGenerator.ThreadType.Thread">
            <summary>
            Use thread
            </summary>
        </member>
        <member name="F:Arction.SignalTools.SignalGenerator.ThreadType.Timer">
            <summary>
            Use timer 
            </summary>
        </member>
        <member name="T:Arction.SignalTools.SignalGenerator.SignalGenerator">
            <summary>
            Signal generator generates signal on-the-fly. Timing is based on computer's clock.
            You can define many different signal waveform components and they are combined as one signal output. 
            The wave component types are: Sine, Triangle, Square and RandomNoise.
            Sample interval is determined as 1/SamplingFrequency. 
            You can define output range scale factor by setting Factor property, but don't confuse this with Amplitude property of a waveform component. 
            Many signal generators can be combined as a synchronized, multi-channel output, via master-slave relationship. 
            You can use the built-in user interface to configure the settings and waveforms or just hide the control define your own user
            interface set the waveforms by filling the waveform component lists. 
            </summary>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.SignalGenerator.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.SignalGenerator.#ctor(System.String)">
            <summary>
            Constructor 
            </summary>
            <param name="embeddableLicenseKey">License key in normal or encrypted format
            Needed when creating the object dynamically at runtime with 'new' 
            operator and there's no controls of same type inserted in any UI designer form.</param>
            <remarks>If you provide the license with this key, 
            YOU ARE NOT ALLOWED TO DISTRIBUTE YOUR SOURCE CODE TO OTHERS. 
            See License Agreement (EULA) for details. </remarks>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.SignalGenerator.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.SignalGenerator.SetParentWindow(System.IntPtr)">
            <summary>
            Set parent window handle (HWND). 
            Needed when using the control from other systems than .NET 
            <param name="hwnd">Parent window handle</param>
            </summary>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.SignalGenerator.GetParentWindow">
            <summary>
            Get parent window handle (HWND). 
            Needed when using the control from other systems than .NET 
            </summary>
            <returns>Parent window handle</returns>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.SignalGenerator.GetCoreCount">
            <summary>
            Get enabled GPU core count. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.SignalGenerator.EnabledWaveFormComponentsCount">
            <summary>
            Get enabled waveform components count 
            </summary>
            <returns>Enabled components count</returns>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.SignalGenerator.Start">
            <summary>
            Start the generator
            </summary>
            <returns>true on success</returns>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.SignalGenerator.Stop">
            <summary>
            Stops the timer or the thread that is used in generating signal. 
            If ThreadType is ThreadType.Thread then Stop method could exit 
            before the thread is stopped. Subscribe to Stopped event which 
            is triggered when signal generator is completely stopped (i.e. 
            the timer or the thread is stopped).
            </summary>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.SignalGenerator.StopTimer">
            <summary>
            Stop the generator timer
            </summary>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.SignalGenerator.CreateWaveformCompsFromUI">
            <summary>
            Create wave form from generator user interface
            </summary>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.SignalGenerator.UpdateUIFromWaveFormComponents">
            <summary>
            Fills the UI from waveform components 
            </summary>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.SignalGenerator.GeneratorThreadLoop">
            <summary>
            Thread main loop
            </summary>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.SignalGenerator.DivideArrayForThreads(System.Int32,System.Int32)">
            <summary>
            Get multicore-processed array. Tells 
            - how many threads are needed, 
            - item count to process per thread 
            - array index where the processing must start for each thread
            </summary>
            <param name="countItems">Array length, which is to processed in multi-core</param>
            <param name="maxThreadCount">Maximum thread count to use. Give System.Environment.ProcessorCount, if no special reason to use less. </param>
            <returns>Array process info per thread. Returned array length is the needed thread count.</returns>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.SignalGenerator.GenerateBlock(System.Int32)">
            <summary>
            Generates block of having given sample count, using properties set
            </summary>
            <param name="sampleCount">Sample count (for each channel)</param>
            <returns>Multi-channel data array</returns>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.SignalGenerator.ToString">
            <summary>
            Convert class description to string 
            </summary>
            <returns>String</returns>
        </member>
        <member name="F:Arction.SignalTools.SignalGenerator.SignalGenerator.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.SignalGenerator.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Arction.SignalTools.SignalGenerator.SignalGenerator.LicenseKey">
            <summary>
            License key in normal or encrypted format
            </summary>
        </member>
        <member name="P:Arction.SignalTools.SignalGenerator.SignalGenerator.ThreadInvoking">
            <summary>
            Built-in invoking to UI thread when using ThreadType = Thread. 
            </summary>
        </member>
        <member name="P:Arction.SignalTools.SignalGenerator.SignalGenerator.MasterGenerator">
            <summary>
            Master generator. Several generators can be combined together to produce a synchronized multi-channel output data stream. 
            Master sets the sampling frequency for each slave generator and combines the samples from each slave to master's output data stream.
            Set this null if this is a master generator. 
            </summary>
        </member>
        <member name="P:Arction.SignalTools.SignalGenerator.SignalGenerator.SamplingFrequency">
            <summary>
            Sampling frequency. The count of output points calculated per second. 
            </summary>
        </member>
        <member name="P:Arction.SignalTools.SignalGenerator.SignalGenerator.ThreadType">
            <summary>
            Thread operation type.
            </summary>
            <remarks>It is easier to track problems and crashes by using the timer.</remarks>
        </member>
        <member name="P:Arction.SignalTools.SignalGenerator.SignalGenerator.OutputIntervalMs">
            <summary>
            Output interval in ms. This is only the target value, and not always accurate. 
            </summary>
        </member>
        <member name="P:Arction.SignalTools.SignalGenerator.SignalGenerator.Factor">
            <summary>
            General factor for output signal. Allows using for example millivolt range by setting this 0.001, or 1E-3
            </summary>
        </member>
        <member name="P:Arction.SignalTools.SignalGenerator.SignalGenerator.WaveFormSines">
            <summary>
            Waveform sine components
            </summary>
        </member>
        <member name="P:Arction.SignalTools.SignalGenerator.SignalGenerator.WaveFormSquares">
            <summary>
            Waveform noise components
            </summary>
        </member>
        <member name="P:Arction.SignalTools.SignalGenerator.SignalGenerator.WaveFormTriangles">
            <summary>
            Waveform triangle components
            </summary>
        </member>
        <member name="P:Arction.SignalTools.SignalGenerator.SignalGenerator.WaveFormRandomNoises">
            <summary>
            Waveform random noise components
            </summary>
        </member>
        <member name="P:Arction.SignalTools.SignalGenerator.SignalGenerator.Running">
            <summary>
            Is generator running or not 
            </summary>
        </member>
        <member name="E:Arction.SignalTools.SignalGenerator.SignalGenerator.NewSignalPointsGenerated">
            <summary>
            New points generated. This is a thread-safe event. The event is raised in UI thread.
            </summary>
            <remarks>This is not raised if operating as slave (the generator has a master generator). </remarks>
        </member>
        <member name="E:Arction.SignalTools.SignalGenerator.SignalGenerator.Started">
            <summary>
            Generator has been started
            </summary>
            <remarks>This is not raised if operating as slave (the generator has a master generator). </remarks>
        </member>
        <member name="E:Arction.SignalTools.SignalGenerator.SignalGenerator.Stopped">
            <summary>
            Generator has stopped
            </summary>
            <remarks>This is not raised if operating as slave (the generator has a master generator). </remarks>
        </member>
        <member name="P:Arction.SignalTools.SignalGenerator.SignalGenerator.MultiCoreProcessing">
            <summary>
            If enabled, computes the signal in several CPU threads. 
            Enables faster rendering when CPU has more cores than 1. Only certain parts of chart are multicore optimized. 
            </summary>
            <remarks>When running the application from Visual Studio debugger, and this is enabled, 
            the performance is worse than without multicore processing. When the application is run directly from
            Windows, the performance is superb. 
            </remarks>
        </member>
        <member name="T:Arction.SignalTools.SignalGenerator.SignalGenerator.NewSignalPointsGeneratedHandler">
            <summary>
            Delegate for event NewSignalPointsGenerated
            </summary>
            <param name="samples">Multi-channel samples array. 
            If no slave generators are defined, access the samples from samples[0][].
            If slave generator are defined, samples[0][] is the channel data, samples[1][] second channel data etc.</param>
            <param name="firstSampleTimeStamp">First sample time stamp, in seconds</param>
        </member>
        <member name="T:Arction.SignalTools.SignalGenerator.SignalGenerator.StartedHandler">
            <summary>
            Delegate for event Started
            </summary>
        </member>
        <member name="T:Arction.SignalTools.SignalGenerator.SignalGenerator.StoppedHandler">
            <summary>
            Delegate for event Stopped
            </summary>
        </member>
        <member name="T:Arction.SignalTools.SignalGenerator.SignalGenerator.ArrayProcessThreadInfo">
            <summary>
            Array process info for a thread 
            </summary>
        </member>
        <member name="F:Arction.SignalTools.SignalGenerator.SignalGenerator.ArrayProcessThreadInfo.StartIndex">
            <summary>
            Start array index 
            </summary>
        </member>
        <member name="F:Arction.SignalTools.SignalGenerator.SignalGenerator.ArrayProcessThreadInfo.Count">
            <summary>
            Count to process within the array
            </summary>
        </member>
        <member name="T:Arction.SignalTools.Filtering.FilterRoutines">
            <summary>
            Static methods for filtering 
            </summary>
        </member>
        <member name="M:Arction.SignalTools.Filtering.FilterRoutines.MovingAverage(System.Double[],System.Int32)">
            <summary>
            Moving (floating) average. Smoothens the given data, by calculating using value and neighbor values
            </summary>
            <param name="values">Input values</param>
            <param name="windowLength">Averaging window length. Calculates output as average of each value and neighbours in range -windowLength/2...+windowLength/2</param>
            <returns>Filtered data</returns>
        </member>
        <member name="F:Arction.SignalTools.SignalGenerator.UserControlSquareTable.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.UserControlSquareTable.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.UserControlSquareTable.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.UserControlSquareTable.FillFromSquareComponents(System.Collections.Generic.List{Arction.SignalTools.SignalGenerator.SquareComponent})">
            <summary>
            Fills the control from given list items 
            </summary>
        </member>
        <member name="T:Arction.SignalTools.SignalGenerator.TriangleComponent">
            <summary>
            Triangle waveform component
            </summary>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.TriangleComponent.IsModified">
            <summary>
            Returns true if any of this instances public properties have 
            been modified. Resets flag before returning.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.TriangleComponent.Clone(Arction.SignalTools.SignalGenerator.TriangleComponent)">
            <summary>
            Clones the object
            </summary>
            <param name="src">Object to clone</param>
            <returns>Cloned object</returns>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.TriangleComponent.ToString">
            <summary>
            Convert class description to string 
            </summary>
            <returns>String</returns>
        </member>
        <member name="P:Arction.SignalTools.SignalGenerator.TriangleComponent.Amplitude">
            <summary>
            Amplitude of triangle component.
            </summary>
        </member>
        <member name="P:Arction.SignalTools.SignalGenerator.TriangleComponent.Offset">
            <summary>
            Offset of triangle component
            </summary>
        </member>
        <member name="P:Arction.SignalTools.SignalGenerator.TriangleComponent.DelayMs">
            <summary>
            Delay of triangle component in ms.
            </summary>
        </member>
        <member name="P:Arction.SignalTools.SignalGenerator.TriangleComponent.Frequency">
            <summary>
            Frequency of triangle component
            </summary>
            <remarks>This is not sampling frequency of the generator!</remarks>
        </member>
        <member name="P:Arction.SignalTools.SignalGenerator.TriangleComponent.Enabled">
            <summary>
            Is the triangle component included in calculation of the output signal
            </summary>
        </member>
        <member name="P:Arction.SignalTools.SignalGenerator.TriangleComponent.Symmetry">
            <summary>
            Triangle wave symmetry. Valid range is 0...1.
            </summary>
        </member>
        <member name="T:Arction.SignalTools.SignalReader.OpenResult">
            <summary>
            Open result
            </summary>
        </member>
        <member name="F:Arction.SignalTools.SignalReader.OpenResult.OK">
            <summary>
            File opened successfully
            </summary>
        </member>
        <member name="F:Arction.SignalTools.SignalReader.OpenResult.FileNotAccessible">
            <summary>
            File is not accessible, wrong path?
            </summary>
        </member>
        <member name="F:Arction.SignalTools.SignalReader.OpenResult.UnknownExtension">
            <summary>
            The extension is not one of the supported ones
            </summary>
        </member>
        <member name="F:Arction.SignalTools.SignalReader.OpenResult.UnknownWaveFormat">
            <summary>
            Wav audio format must be PCM. Others will fail.
            </summary>
        </member>
        <member name="F:Arction.SignalTools.SignalGenerator.UserControlSquareRow.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.UserControlSquareRow.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.UserControlSquareRow.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Arction.SignalTools.SignalGenerator.SineComponent">
            <summary>
            Sine waveform component
            </summary>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.SineComponent.#ctor">
            <summary>
            Sine waveform component
            </summary>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.SineComponent.Clone(Arction.SignalTools.SignalGenerator.SineComponent)">
            <summary>
            Clones the object
            </summary>
            <param name="src">Object to clone</param>
            <returns>Cloned object</returns>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.SineComponent.IsModified">
            <summary>
            Returns true if any of this instances public properties have 
            been modified. Resets flag before returning.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Arction.SignalTools.SignalGenerator.SineComponent.ToString">
            <summary>
            Convert class description to string 
            </summary>
            <returns>String</returns>
        </member>
        <member name="P:Arction.SignalTools.SignalGenerator.SineComponent.Amplitude">
            <summary>
            Amplitude of sine component.
            </summary>
        </member>
        <member name="P:Arction.SignalTools.SignalGenerator.SineComponent.Offset">
            <summary>
            Offset of sine component
            </summary>
        </member>
        <member name="P:Arction.SignalTools.SignalGenerator.SineComponent.DelayMs">
            <summary>
            Delay of sine component in ms.
            </summary>
        </member>
        <member name="P:Arction.SignalTools.SignalGenerator.SineComponent.Frequency">
            <summary>
            Frequency of sine component
            </summary>
            <remarks>This is not sampling frequency of the generator!</remarks>
        </member>
        <member name="P:Arction.SignalTools.SignalGenerator.SineComponent.Enabled">
            <summary>
            Is the sine component included in calculation of the output signal
            </summary>
        </member>
    </members>
</doc>
